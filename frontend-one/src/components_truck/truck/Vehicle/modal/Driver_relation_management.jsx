import axios from "axios";
import React, { useState, useEffect } from "react";
import Modal from "react-modal";

Modal.setAppElement('#root'); // ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ ID ‡∏Ç‡∏≠‡∏á element ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ

const Driver_relation_management = ({ isOpen, onClose, dataVehicle, onSuccess }) => {
  const [user, setUser] = useState(null);
  const [empCode, setEmpCode] = useState([]);
  const [isFetched, setIsFetched] = useState(false); // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
  const [dataRelation, setDataRelation] = useState({
    reg_id: "",
    emp_code: "",
    assigned_date: "",
    notes: "",
    assigned_by: "" // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
  });

  useEffect(() => {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å localStorage
    const userData = localStorage.getItem("user");
    if (userData) {
      const parsedUser = JSON.parse(userData);
      setUser(parsedUser);

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤ assigned_by ‡πÄ‡∏°‡∏∑‡πà‡∏≠ user ‡∏ñ‡∏π‡∏Å‡πÇ‡∏´‡∏•‡∏î
      setDataRelation(prevState => ({
        ...prevState,
        assigned_by: `${parsedUser.fname} ${parsedUser.lname}`
      }));
    }
  }, []);

  useEffect(() => {
    if (dataVehicle?.reg_id) {
      setDataRelation(prevState => ({
        ...prevState,
        reg_id: dataVehicle.reg_id
      }));
    }
  }, [dataVehicle]);

  useEffect(() => {
    setDataRelation(prevState => ({
      ...prevState,
      assigned_date: new Date().toISOString().split("T")[0]
    }));
  }, []);


  const fetchEmpCod = async () => {
    const isCodeID = dataRelation.emp_code;
    if (!isCodeID) return; // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô

    try {
      const response = await axios.get(
        `http://localhost:3333/api/getemployeeshowcode/${isCodeID}`,
        {
          headers: {
            Authorization: `Bearer ${localStorage.getItem("accessToken")}`,
          },
        }
      );
      setEmpCode(response.data);
      setIsFetched(true); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß
    } catch (error) {
      console.error("Error fetching employee details:", error);
      setEmpCode([]); // ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏Å‡∏¥‡∏î error ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô array ‡∏ß‡πà‡∏≤‡∏á
      setIsFetched(true);
    }
  };

  const handleSubmitAddEmpRelation = async (e) => {
    e.preventDefault();
    console.log("üìå Data before sending:", dataRelation);
  
    if (!dataRelation.emp_code || !dataRelation.reg_id) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");
      return;
    }
  
    try {
      const response = await axios.post(
        `http://localhost:3333/api/add_driver_relation`,
        dataRelation,
        {
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${localStorage.getItem("accessToken")}`,
          },
        }
      );
  
      console.log("‚úÖ Response:", response.data);
      alert("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
  

        onSuccess(); // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
   
  
      onClose(); // ‡∏õ‡∏¥‡∏î‡πÇ‡∏°‡∏î‡∏≠‡∏•
    } catch (error) {
      console.error("‚ùå Error saving data:", error);
      console.log("üö® Server Response:", error.response?.data);
      alert(error.response?.data?.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
    }
  };
  


  if (!user) {
    return <p>Loading...</p>;
  }
  return (
    <Modal
      isOpen={isOpen}
      onRequestClose={onClose}
      ariaHideApp={false} // You can also disable if needed
      contentLabel="Employee Details"
      style={{
        content: {
          width: "90%",
          maxWidth: "600px",
          maxHeight: "80vh",
          margin: "auto",
          padding: "0",
          border: "none",
          borderRadius: "0.5rem",
          overflowY: "auto",
        },
        overlay: {
          backgroundColor: "rgba(0, 0, 0, 0.5)",
          zIndex: 9999,
          display: "flex",
          alignItems: "center",
          justifyContent: "center",
        },
      }}
    >
      <div className="p-3 mb-3">
        <div className="d-flex justify-content-between align-items-center">
          <p className="fw-bolder mx-auto">‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏£‡∏ñ (‡∏û‡∏Ç‡∏£.)</p>
          <button onClick={onClose}>
            <i className="bi bi-x-lg"></i>
          </button>
        </div>

        <div className="col-lg-12 mb-3">
          <label htmlFor="input_reg_number" className="form-label fw-medium">
            ‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ
          </label>
          <input
            type="text"
            name="reg_number"
            id="input_reg_number"
            className="form-control"
            value={dataVehicle.reg_number}
            readOnly
          />
        </div>

        <div className="col-lg-12 mb-3">
          <label htmlFor="input_code" className="form-label fw-medium">
            ‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô<span style={{ color: "red" }}> *</span>
          </label>
          <div className="input-group">
            <input
              type="text"
              name="code"
              id="input_code"
              className="form-control"
              value={dataRelation.emp_code}
              onChange={(e) => setDataRelation({ ...dataRelation, emp_code: e.target.value })}
              placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô"
            />
            <button className="btn btn-gray" type="button" onClick={fetchEmpCod}>
              ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
            </button>
          </div>
          {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß */}
          {isFetched && (
            <div className="mt-2">
              {empCode.length > 0 ? (
                empCode.map((rowEmp) => (
                  <div key={rowEmp.code}>
                    <p>
                      <strong>‡∏ä‡∏∑‡πà‡∏≠: </strong> {rowEmp.lname} {rowEmp.fname} <strong style={{ color: "Green" }}>‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á</strong>
                    </p>
                  </div>
                ))
              ) : (
                <p className="text-danger">‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô</p>
              )}
            </div>
          )}
        </div>

        <div className="col-lg-12 mb-3">
          <label htmlFor="input_assigned_datee" className="form-label fw-medium">
            ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢
          </label>
          <input
            type="date"
            name="assigned_date"
            id="input_assigned_date"
            className="form-control"
            value={dataRelation.assigned_date}
            onChange={(e) => setDataRelation({ ...dataRelation, assigned_date: e.target.value })}
          />

        </div>

        <div className="col-lg-12 mb-3">
          <label htmlFor="input_note" className="form-label fw-medium">
            ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
          </label>
          <textarea
            name="note"
            id="input_note"
            className="form-control"
            placeholder=""
            rows="4" // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á
            value={dataRelation.notes}
            onChange={(e) => setDataRelation({ ...dataRelation, notes: e.target.value })}
          />

        </div>

        <div className="text-center">
          <button className="btn" style={{ background: "Teal", color: "#ffffff" }} onClick={handleSubmitAddEmpRelation}>
            ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
          </button>

        </div>
      </div>
    </Modal>
  );
};

export default Driver_relation_management;
